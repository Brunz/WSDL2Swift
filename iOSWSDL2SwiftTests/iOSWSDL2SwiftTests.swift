import XCTest
import Toki
import WSDL2Swift
import AEXML
import JetToTheFuture

@testable import iOSWSDL2Swift // import app specific swift generated by WSDL2Swift
extension TempConvert: WSDLServiceStubbable {} // declare conformance for each WSDLService type
extension WSDLServiceStubbable {
    public func soapRequest<R: XSDType>(_ response: R, _ tns: String) -> AEXMLDocument {
        return response.soapRequest(tns) // match protocol requirements here because this soapRequest is internal
    }
}

class iOSWSDL2SwiftTests: XCTestCase {
    let service = TempConvert(endpoint: "/")

    func testTempConvert_CelsiusToFahrenheit() {
        stub(service,
             TempConvert_CelsiusToFahrenheit.self,
             TempConvert_CelsiusToFahrenheitResponse(CelsiusToFahrenheitResult: "999"))

        let r = forcedFuture {self.service.request(TempConvert_CelsiusToFahrenheit(Celsius: "30"))}
        XCTAssertNotNil(r.value)
        XCTAssertEqual(r.value?.CelsiusToFahrenheitResult, "999")
    }
}
